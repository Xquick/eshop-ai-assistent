create table "public"."subscription_types" (
    "id" text not null,
    "token_count_type" bigint,
    "period" numeric
);


alter table "public"."subscription_types" enable row level security;

create table "public"."subscriptions" (
    "id" bigint generated by default as identity not null,
    "uid" uuid,
    "type" text,
    "starts_at" timestamp without time zone default now()
);


alter table "public"."subscriptions" enable row level security;

create table "public"."token_count_types" (
    "id" bigint generated by default as identity not null,
    "token_count" numeric
);


alter table "public"."token_count_types" enable row level security;

create table "public"."tokens_movement" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "uid" uuid,
    "token_count" numeric default '0'::numeric,
    "reason" text
);


alter table "public"."tokens_movement" enable row level security;

alter table "public"."history" add column "created_at" timestamp with time zone default now();

alter table "public"."payments" drop column "service_type";

alter table "public"."payments" add column "subscription_type" text;

CREATE UNIQUE INDEX accounts_pkey ON public.subscriptions USING btree (id);

CREATE UNIQUE INDEX service_types_pkey ON public.subscription_types USING btree (id);

CREATE UNIQUE INDEX token_count_types_pkey ON public.token_count_types USING btree (id);

CREATE UNIQUE INDEX token_movement_pkey ON public.tokens_movement USING btree (id);

alter table "public"."subscription_types" add constraint "service_types_pkey" PRIMARY KEY using index "service_types_pkey";

alter table "public"."subscriptions" add constraint "accounts_pkey" PRIMARY KEY using index "accounts_pkey";

alter table "public"."token_count_types" add constraint "token_count_types_pkey" PRIMARY KEY using index "token_count_types_pkey";

alter table "public"."tokens_movement" add constraint "token_movement_pkey" PRIMARY KEY using index "token_movement_pkey";

alter table "public"."payments" add constraint "payments_subscription_type_fkey" FOREIGN KEY (subscription_type) REFERENCES subscription_types(id) ON DELETE CASCADE not valid;

alter table "public"."payments" validate constraint "payments_subscription_type_fkey";

alter table "public"."subscription_types" add constraint "subscription_types_token_count_type_fkey" FOREIGN KEY (token_count_type) REFERENCES token_count_types(id) not valid;

alter table "public"."subscription_types" validate constraint "subscription_types_token_count_type_fkey";

alter table "public"."subscriptions" add constraint "subscriptions_type_fkey" FOREIGN KEY (type) REFERENCES subscription_types(id) ON DELETE CASCADE not valid;

alter table "public"."subscriptions" validate constraint "subscriptions_type_fkey";

alter table "public"."subscriptions" add constraint "subscriptions_uid_fkey" FOREIGN KEY (uid) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."subscriptions" validate constraint "subscriptions_uid_fkey";

alter table "public"."tokens_movement" add constraint "tokens_movement_uid_fkey" FOREIGN KEY (uid) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."tokens_movement" validate constraint "tokens_movement_uid_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  insert into public.tokens (uid, token_count)
  values (new.id, 20000);
  insert into public.tokens_movement (uid, token_count, reason)
  values (new.id, 20000, 'init');
  insert into public.subscriptions (uid, type)
  values (new.id, 'trial');
  return new;
end;
$function$
;

create policy "Enable delete for users based on user_id"
on "public"."payments"
as permissive
for select
to public
using ((auth.uid() = uid));


create policy "Enable read access for all users"
on "public"."subscription_types"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."subscriptions"
as permissive
for select
to public
using ((auth.uid() = uid));


create policy "Enable delete for users based on user_id"
on "public"."tokens_movement"
as permissive
for select
to public
using ((auth.uid() = uid));



