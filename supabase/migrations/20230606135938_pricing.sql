create table "public"."price" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "subscription_type_id" text,
    "price" numeric,
    "price_list_id" bigint
);


alter table "public"."price" enable row level security;

create table "public"."price_list" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" text,
    "description" text,
    "is_default" boolean
);


alter table "public"."price_list" enable row level security;

alter table "public"."chat" enable row level security;

alter table "public"."content_type" add column "icon" text;

alter table "public"."content_type" add column "order" numeric;

alter table "public"."subscription" add column "price_list_id" bigint;

alter table "public"."subscription_type" drop column "price";

CREATE UNIQUE INDEX price_list_pkey ON public.price_list USING btree (id);

CREATE UNIQUE INDEX subscription_price_pkey ON public.price USING btree (id);

alter table "public"."price" add constraint "subscription_price_pkey" PRIMARY KEY using index "subscription_price_pkey";

alter table "public"."price_list" add constraint "price_list_pkey" PRIMARY KEY using index "price_list_pkey";

alter table "public"."price" add constraint "price_price_list_id_fkey" FOREIGN KEY (price_list_id) REFERENCES price_list(id) ON DELETE CASCADE not valid;

alter table "public"."price" validate constraint "price_price_list_id_fkey";

alter table "public"."price" add constraint "price_subscription_type_id_fkey" FOREIGN KEY (subscription_type_id) REFERENCES subscription_type(id) ON DELETE CASCADE not valid;

alter table "public"."price" validate constraint "price_subscription_type_id_fkey";

alter table "public"."subscription" add constraint "subscription_price_list_id_fkey" FOREIGN KEY (price_list_id) REFERENCES price_list(id) ON DELETE CASCADE not valid;

alter table "public"."subscription" validate constraint "subscription_price_list_id_fkey";

set check_function_bodies = off;

create type "public"."chat_prompt_with_response" as ("prompt_id" integer, "response_id" integer, "chat_id" integer, "prompt_content" text, "response_content" text);

CREATE OR REPLACE FUNCTION public.create_chat_prompt(chat_id_input integer, content_input text)
 RETURNS SETOF chat_prompt_with_response
 LANGUAGE plpgsql
AS $function$
  declare
    p_id int;
    r_id int;
  begin

  insert into chat_prompt(chat_id, text)
  values(chat_id_input,content_input) returning id into p_id;

  insert into chat_response(text, prompt_id)
  values('', p_id) returning id into r_id;
  
  update chat_prompt set response_id = r_id where id = p_id;

  return query
  select p_id as prompt_id, r_id as response_id, chat_id_input as chat_id, content_input as prompt_content, '' as response_content;

end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_chat_prompt()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$declare
  r_id int;
begin
  insert into public.chat_response (prompt_id, text) values (new.id,'') returning id into r_id;
  update public.chat_prompt SET response_id = r_id where id = new.id;
  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$declare
  default_price_list_id int;
begin
  select id
  into default_price_list_id
  from public.price_list
  where is_default=true;

  insert into public.profile (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  insert into public.token (uid, token_count)
  values (new.id, 0);
  insert into public.subscription (uid, type_next, price_list_id)
  values (new.id, 'trial', default_price_list_id);
  return new;
end;
$function$
;

create policy "Enable all for users based on user_id"
on "public"."chat"
as permissive
for all
to public
using ((auth.uid() = uid));


create policy "Enable read access for all users"
on "public"."price"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."price_list"
as permissive
for select
to public
using (true);



