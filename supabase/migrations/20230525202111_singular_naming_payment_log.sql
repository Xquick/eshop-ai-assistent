drop policy "Enable read access for all users" on "public"."content_types";

drop policy "Enable delete for users based on user_id" on "public"."payments";

drop policy "Enable delete for users based on user_id" on "public"."profiles";

drop policy "Enable read access for all users" on "public"."subscription_types";

drop policy "Enable delete for users based on user_id" on "public"."subscriptions";

drop policy "Enable delete for users based on user_id" on "public"."tokens";

drop policy "Enable delete for users based on user_id" on "public"."tokens_movement";

alter table "public"."payments" drop constraint "payments_subscription_type_fkey";

alter table "public"."payments" drop constraint "payments_uid_fkey";

alter table "public"."profiles" drop constraint "profiles_id_fkey";

alter table "public"."profiles" drop constraint "profiles_username_key";

alter table "public"."profiles" drop constraint "username_length";

alter table "public"."subscription_types" drop constraint "subscription_types_token_count_type_fkey";

alter table "public"."subscriptions" drop constraint "subscriptions_type_fkey";

alter table "public"."subscriptions" drop constraint "subscriptions_uid_fkey";

alter table "public"."tokens" drop constraint "tokens_uid_fkey";

alter table "public"."tokens_movement" drop constraint "tokens_movement_uid_fkey";

alter table "public"."history" drop constraint "history_content_type_id_fkey";

alter table "public"."content_types" drop constraint "content_types_pkey";

alter table "public"."payments" drop constraint "payments_pkey";

alter table "public"."profiles" drop constraint "profiles_pkey";

alter table "public"."subscription_types" drop constraint "service_types_pkey";

alter table "public"."subscriptions" drop constraint "accounts_pkey";

alter table "public"."token_count_types" drop constraint "token_count_types_pkey";

alter table "public"."tokens" drop constraint "tokens_pkey";

alter table "public"."tokens_movement" drop constraint "token_movement_pkey";

drop index if exists "public"."token_count_types_pkey";

drop index if exists "public"."accounts_pkey";

drop index if exists "public"."content_types_pkey";

drop index if exists "public"."payments_pkey";

drop index if exists "public"."profiles_pkey";

drop index if exists "public"."profiles_username_key";

drop index if exists "public"."service_types_pkey";

drop index if exists "public"."token_movement_pkey";

drop index if exists "public"."tokens_pkey";

drop table "public"."content_types";

drop table "public"."payments";

drop table "public"."profiles";

drop table "public"."subscription_types";

drop table "public"."subscriptions";

drop table "public"."token_count_types";

drop table "public"."tokens";

drop table "public"."tokens_movement";

create table "public"."content_type" (
    "id" bigint generated by default as identity not null,
    "type" character varying
);


alter table "public"."content_type" enable row level security;

create table "public"."payment_log" (
    "id" bigint generated by default as identity not null,
    "paid_at" timestamp with time zone default now(),
    "uid" uuid,
    "price" numeric,
    "currency" text,
    "ref_id" text,
    "trans_id" text,
    "vs" text,
    "subscription_type" text,
    "purchase_type" text
);


alter table "public"."payment_log" enable row level security;

create table "public"."profile" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "avatar_url" text,
    "website" text
);


alter table "public"."profile" enable row level security;

create table "public"."purchase_type" (
    "id" text not null,
    "token_count" numeric,
    "price" numeric
);


alter table "public"."purchase_type" enable row level security;

create table "public"."subscription" (
    "id" bigint generated by default as identity not null,
    "uid" uuid,
    "type" text,
    "starts_at" timestamp without time zone default now(),
    "payment_recurring_at" date,
    "payment_recurring_id" text,
    "type_next" text
);


alter table "public"."subscription" enable row level security;

create table "public"."subscription_type" (
    "id" text not null,
    "period" numeric,
    "price" numeric,
    "payment_frequency" text,
    "token_count" numeric
);


alter table "public"."subscription_type" enable row level security;

create table "public"."token" (
    "id" bigint generated by default as identity not null,
    "uid" uuid,
    "token_count" numeric
);


alter table "public"."token" enable row level security;

create table "public"."token_movement" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "uid" uuid,
    "token_count" numeric default '0'::numeric,
    "reason" text
);


alter table "public"."token_movement" enable row level security;

CREATE UNIQUE INDEX purchase_types_pkey ON public.purchase_type USING btree (id);

CREATE UNIQUE INDEX accounts_pkey ON public.subscription USING btree (id);

CREATE UNIQUE INDEX content_types_pkey ON public.content_type USING btree (id);

CREATE UNIQUE INDEX payments_pkey ON public.payment_log USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profile USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profile USING btree (username);

CREATE UNIQUE INDEX service_types_pkey ON public.subscription_type USING btree (id);

CREATE UNIQUE INDEX token_movement_pkey ON public.token_movement USING btree (id);

CREATE UNIQUE INDEX tokens_pkey ON public.token USING btree (id);

alter table "public"."content_type" add constraint "content_types_pkey" PRIMARY KEY using index "content_types_pkey";

alter table "public"."payment_log" add constraint "payments_pkey" PRIMARY KEY using index "payments_pkey";

alter table "public"."profile" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."purchase_type" add constraint "purchase_types_pkey" PRIMARY KEY using index "purchase_types_pkey";

alter table "public"."subscription" add constraint "accounts_pkey" PRIMARY KEY using index "accounts_pkey";

alter table "public"."subscription_type" add constraint "service_types_pkey" PRIMARY KEY using index "service_types_pkey";

alter table "public"."token" add constraint "tokens_pkey" PRIMARY KEY using index "tokens_pkey";

alter table "public"."token_movement" add constraint "token_movement_pkey" PRIMARY KEY using index "token_movement_pkey";

alter table "public"."payment_log" add constraint "payment_log_purchase_type_fkey" FOREIGN KEY (purchase_type) REFERENCES purchase_type(id) ON DELETE CASCADE not valid;

alter table "public"."payment_log" validate constraint "payment_log_purchase_type_fkey";

alter table "public"."payment_log" add constraint "payment_log_subscription_type_fkey" FOREIGN KEY (subscription_type) REFERENCES subscription_type(id) ON DELETE CASCADE not valid;

alter table "public"."payment_log" validate constraint "payment_log_subscription_type_fkey";

alter table "public"."payment_log" add constraint "payment_log_uid_fkey" FOREIGN KEY (uid) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."payment_log" validate constraint "payment_log_uid_fkey";

alter table "public"."profile" add constraint "profile_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profile" validate constraint "profile_id_fkey";

alter table "public"."profile" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profile" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profile" validate constraint "username_length";

alter table "public"."subscription" add constraint "subscription_type_fkey" FOREIGN KEY (type) REFERENCES subscription_type(id) ON DELETE CASCADE not valid;

alter table "public"."subscription" validate constraint "subscription_type_fkey";

alter table "public"."subscription" add constraint "subscription_type_next_fkey" FOREIGN KEY (type_next) REFERENCES subscription_type(id) ON DELETE CASCADE not valid;

alter table "public"."subscription" validate constraint "subscription_type_next_fkey";

alter table "public"."subscription" add constraint "subscription_uid_fkey" FOREIGN KEY (uid) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."subscription" validate constraint "subscription_uid_fkey";

alter table "public"."token" add constraint "token_uid_fkey" FOREIGN KEY (uid) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."token" validate constraint "token_uid_fkey";

alter table "public"."token_movement" add constraint "token_movement_uid_fkey" FOREIGN KEY (uid) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."token_movement" validate constraint "token_movement_uid_fkey";

alter table "public"."history" add constraint "history_content_type_id_fkey" FOREIGN KEY (content_type_id) REFERENCES content_type(id) ON DELETE CASCADE not valid;

alter table "public"."history" validate constraint "history_content_type_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profile (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  insert into public.token (uid, token_count)
  values (new.id, 0);
  insert into public.subscription (uid, type_next)
  values (new.id, 'trial');
  return new;
end;
$function$
;

create policy "Enable read access for all users"
on "public"."content_type"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."payment_log"
as permissive
for select
to public
using ((auth.uid() = uid));


create policy "Enable delete for users based on user_id"
on "public"."profile"
as permissive
for select
to public
using ((auth.uid() = id));


create policy "Enable delete for users based on user_id"
on "public"."subscription"
as permissive
for select
to public
using ((auth.uid() = uid));


create policy "Enable read access for all users"
on "public"."subscription_type"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."token"
as permissive
for select
to public
using ((auth.uid() = uid));


create policy "Enable delete for users based on user_id"
on "public"."token_movement"
as permissive
for select
to public
using ((auth.uid() = uid));



