drop policy "Enable delete for users based on user_id" on "public"."history";

alter table "public"."history" drop constraint "history_content_type_id_fkey";

alter table "public"."history" drop constraint "history_uid_fkey";

alter table "public"."history" drop constraint "history_pkey";

drop index if exists "public"."history_pkey";

drop table "public"."history";

create table "public"."chat" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "content_type_id" bigint,
    "uid" uuid,
    "name" text
);


create table "public"."chat_filter" (
    "id" bigint generated by default as identity not null,
    "name" text,
    "type" text
);


create table "public"."chat_prompt" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "text" text,
    "chat_id" bigint,
    "response_id" bigint
);


create table "public"."chat_prompt_chat_filter" (
    "id" bigint generated by default as identity not null,
    "chat_prompt_id" bigint,
    "chat_filter_id" bigint
);


create table "public"."chat_response" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "text" text,
    "prompt_id" bigint
);


CREATE UNIQUE INDEX chat_filter_pkey ON public.chat_filter USING btree (id);

CREATE UNIQUE INDEX chat_message_pkey ON public.chat_response USING btree (id);

CREATE UNIQUE INDEX chat_pkey ON public.chat USING btree (id);

CREATE UNIQUE INDEX chat_prompt_pkey ON public.chat_prompt USING btree (id);

CREATE UNIQUE INDEX prompt_filter_pkey ON public.chat_prompt_chat_filter USING btree (id);

alter table "public"."chat" add constraint "chat_pkey" PRIMARY KEY using index "chat_pkey";

alter table "public"."chat_filter" add constraint "chat_filter_pkey" PRIMARY KEY using index "chat_filter_pkey";

alter table "public"."chat_prompt" add constraint "chat_prompt_pkey" PRIMARY KEY using index "chat_prompt_pkey";

alter table "public"."chat_prompt_chat_filter" add constraint "prompt_filter_pkey" PRIMARY KEY using index "prompt_filter_pkey";

alter table "public"."chat_response" add constraint "chat_message_pkey" PRIMARY KEY using index "chat_message_pkey";

alter table "public"."chat" add constraint "chat_content_type_id_fkey" FOREIGN KEY (content_type_id) REFERENCES content_type(id) ON DELETE CASCADE not valid;

alter table "public"."chat" validate constraint "chat_content_type_id_fkey";

alter table "public"."chat" add constraint "chat_uid_fkey" FOREIGN KEY (uid) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."chat" validate constraint "chat_uid_fkey";

alter table "public"."chat_prompt" add constraint "chat_prompt_chat_id_fkey" FOREIGN KEY (chat_id) REFERENCES chat(id) ON DELETE CASCADE not valid;

alter table "public"."chat_prompt" validate constraint "chat_prompt_chat_id_fkey";

alter table "public"."chat_prompt" add constraint "chat_prompt_response_id_fkey" FOREIGN KEY (response_id) REFERENCES chat_response(id) ON DELETE CASCADE not valid;

alter table "public"."chat_prompt" validate constraint "chat_prompt_response_id_fkey";

alter table "public"."chat_prompt_chat_filter" add constraint "chat_prompt_chat_filter_chat_filter_id_fkey" FOREIGN KEY (chat_filter_id) REFERENCES chat_filter(id) ON DELETE CASCADE not valid;

alter table "public"."chat_prompt_chat_filter" validate constraint "chat_prompt_chat_filter_chat_filter_id_fkey";

alter table "public"."chat_prompt_chat_filter" add constraint "chat_prompt_chat_filter_chat_prompt_id_fkey" FOREIGN KEY (chat_prompt_id) REFERENCES chat_prompt(id) ON DELETE CASCADE not valid;

alter table "public"."chat_prompt_chat_filter" validate constraint "chat_prompt_chat_filter_chat_prompt_id_fkey";

alter table "public"."chat_response" add constraint "chat_response_prompt_id_fkey" FOREIGN KEY (prompt_id) REFERENCES chat_prompt(id) ON DELETE CASCADE not valid;

alter table "public"."chat_response" validate constraint "chat_response_prompt_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_chat_prompt()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$declare
  r_id int;
begin
  insert into public.chat_response (prompt_id) values (new.id) returning id into r_id;
  update public.chat_prompt SET response_id = r_id where id = new.id;
  return new;
end;
$function$
;

create policy "Enable update for users based on user_id"
on "public"."profile"
as permissive
for update
to public
using ((auth.uid() = id));


CREATE TRIGGER on_prompt_created_insert_empty_response AFTER INSERT ON public.chat_prompt FOR EACH ROW EXECUTE FUNCTION handle_new_chat_prompt();


